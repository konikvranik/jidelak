import java.security.KeyStore.Builder;
import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply plugin: 'android'
apply plugin: 'eclipse'
apply plugin: 'idea'


version = '1.6'
android.defaultConfig.versionCode = 94

group = "net.suteren.android.jidelak"

sourceCompatibility = 1.6


repositories {
	def androidHome = System.getenv("ANDROID_HOME")
	if (androidHome == null) {
		Properties properties = new Properties()
		properties.load(project.rootProject.file('local.properties').newDataInputStream())
		androidHome = properties.getProperty('sdk.dir')
	}
        maven {
            url "$androidHome/extras/android/m2repository/"
        }
        maven {
            url "$androidHome/extras/google/m2repository/"
        }
	mavenCentral()
}

dependencies {

	compile( project(':jidelak-common')) { exclude module: 'slf4j-api' }
	compile 'com.android.support:support-v4:19.0.1'
	compile 'com.android.support:appcompat-v7:19.0.1'
	compile 'com.google.android.gms:play-services:3.2.+'
	compile 'net.sf.jtidy:jtidy:r938'
	compile 'org.slf4j:slf4j-android:1.6.1-RC1'
	compile 'org.apache.commons:commons-lang3:3.2.1'
	// compile 'net.sourceforge.htmlcleaner:htmlcleaner:2.6.1'

}

configurations { provided }

def libDir = new File(project.projectDir, 'libs')

eclipse {

	classpath {
		plusConfigurations += configurations.compile
		noExportConfigurations += configurations.compile

		containers (
				"com.android.ide.eclipse.adt.ANDROID_FRAMEWORK",
				"com.android.ide.eclipse.adt.DEPENDENCIES",
				"com.android.ide.eclipse.adt.LIBRARIES"
				)


		file {
			beforeMerged { classpath ->
				classpath.entries.removeAll() { c ->
					c.kind == 'con' && c.path == 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK'
				}
				try {
					delete libDir
					libDir.mkdirs()
				} catch (e) {
					logger.warn(e.message, e)
				}
			}

			whenMerged { classpath ->

				classpath.entries -= classpath.entries.findAll() { c ->
					def path = c.path
					path != null && (path.contains('/com.android.support/support-v4'))
				}

				classpath.entries.each() { c ->
					if (c.kind == "src" && c.path.startsWith("/")) c.exported = true
					if (c.kind == "con" && c.path == "com.android.ide.eclipse.adt.ANDROID_FRAMEWORK") c.exported = false

					def path = c.path
					if (c.kind == "lib"
					&& !(
					path.contains("appcompat-v7")
					||path.contains("support-v4")
					||path.contains("slf4j-api")
					)
					) {
						// ||path.contains("stax")||path.contains("xpp3")
						copy {
							from path
							into libDir
						}
					}
				}
			}
		}
	}

	project {

		name 'jidelak'

		natures 'com.android.ide.eclipse.adt.AndroidNature',
				'org.springsource.ide.eclipse.gradle.core.nature',
				'org.eclipse.jdt.core.javanature',
				'org.eclipse.jdt.groovy.core.groovyNature'

		buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
		buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'

	}
}

buildscript {
	def androidHome = System.getenv("ANDROID_HOME")
	if (androidHome == null) {
		Properties properties = new Properties()
		properties.load(project.rootProject.file('local.properties').newDataInputStream())
		androidHome = properties.getProperty('sdk.dir')
	}
	repositories {
        	maven {
	            url "$androidHome/extras/android/m2repository/"
        	}
        	maven {
	            url "$androidHome/extras/google/m2repository/"
        	}
		mavenCentral()
	}
	dependencies { classpath 'com.android.tools.build:gradle:+' }
}


sourceSets {
	// main { java { srcDir 'gen' } }
}

android {

	compileSdkVersion 19
	buildToolsVersion "22.0.1"

	defaultConfig {
		minSdkVersion 8
		targetSdkVersion 19
		versionName = project.version
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src/main/java']
			resources.srcDirs = ['src/main/resources']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		test.setRoot('tests')
		test {
			java.srcDirs = ['tests/src']
			res.srcDirs = ['tests/res']
			assets.srcDirs = ['tests/assets']
			resources.srcDirs = ['tests/src']
		}

		instrumentTest.setRoot('tests')
		instrumentTest {
			java.srcDirs = ['tests/src']
			res.srcDirs = ['tests/res']
			assets.srcDirs = ['tests/assets']
			resources.srcDirs = ['tests/src']
		}
	}

	signingConfigs {
		release {
			storeFile file("release.keystore")
			storePassword "lopata"
			keyAlias "jidelak"
			keyPassword "lopata"
		}
	}

	buildTypes {
		release {
			// runProguard false
			//proguardFile getDefaultProguardFile('proguard-android.txt')
			proguardFile 'proguard-project.txt'
			signingConfig signingConfigs.release
		}
	}

	packagingOptions { exclude 'META-INF/LICENSE.txt' }

	lintOptions { abortOnError false }

}



